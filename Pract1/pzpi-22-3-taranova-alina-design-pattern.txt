Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Катедра програмної інженерії
ЗВІТ
з практичного заняття №1
з дисципліни «Архітектура програмного забезпечення»
на тему: «Патерни проєктування»
Виконала
ст. гр. ПЗПІ-22-3
Таранова Аліна Андріївна
Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович
Харків 2025

1 ІСТОРІЯ ЗМІН
№ Дата Версія
звіту
Опис змін та виправлень
1 20.03.2025 0.1 Сформовано структуру звіту.
2 22.03.2025 0.1 Описано розділ «Завдання».
3 23.03.2025 0.1 Висвітлено призначення та принципи роботи
патерна Прототип.
4 24.03.2025 0.1 Описано практичні приклади застосування.
Створено висновки.
5 25.03.2025 0.1 Додано слайди презентації у додаток Б.
6 25.03.2025 0.1 Внесено посилання на відео доповіді та
хронологічний опис.

2 ЗАВДАННЯ
Вивчити програмний шаблон (патерн) проєктування Прототип, його мету,
структуру, реалізаційні особливості та варіанти застосування в
об’єктноорієнтованому програмуванні. Продемонструвати принцип роботи
патерна на конкретних прикладах програмного коду з метою ілюстрації його
практичного використання у процесі розробки програмного забезпечення.

3 ОПИС ВИКОНАНОЇ РОБОТИ
У ході виконання завдання було підготовлено доповідь, яка супроводжувалася
мультимедійною презентацією, що викладена у додатку Б. Запис виступу зі
слайдами додано у додатку А.
Програмні системи, що активно розвиваються в сучасних умовах, потребують
ефективних рішень для створення об'єктів. Одним із підходів, що дозволяє
оптимізувати цей процес, є використання створювальних патернів
проєктування. Патерн Прототип належить до таких шаблонів і дає змогу
створювати нові об'єкти шляхом копіювання вже існуючих екземплярів.
Прототип особливо ефективний у випадках, коли створення об’єкта через
конструктор є дорогим або складним. Це може бути обумовлено значною
кількістю параметрів ініціалізації, необхідністю завантаження зовнішніх
ресурсів або високим навантаженням на систему.
Ключовою особливістю шаблону Прототип є реалізація методу clone() або
copy(), який повертає точну копію об'єкта. Існує два види копіювання:
 Поверхневе копіювання (shallow copy) — копіюються лише значення
верхнього рівня, посилання залишаються спільними;
 Глибоке копіювання (deep copy) — створюються копії і вкладених
об’єктів, забезпечуючи повну незалежність копії.
Шаблон Прототип дозволяє знизити зв’язаність системи та підвищити
гнучкість коду. Це досягається завдяки тому, що клієнтський код не залежить
від конкретного класу об’єкта — достатньо лише підтримувати метод
клонування.
У межах цієї роботи було розглянуто кілька прикладів реалізації патерна
мовою Python. Наприклад, створення класу Car, який містить метод clone для
створення копії автомобіля з тими самими властивостями. Також було
розглянуто, як відбувається глибоке копіювання за допомогою стандартної
бібліотеки copy.
Патерн Прототип активно використовується в наступних сферах:
 Відеоігри: для створення великої кількості однотипних об'єктів
(наприклад, ворогів, NPC).
 Графічні редактори: копіювання векторних або растрових об'єктів.
 Розробка складних конфігураційних систем, де потрібно клонувати
шаблони налаштувань.
Серед переваг Прототипа:
Зменшення витрат на створення об'єктів.
 Мінімізація залежності від конкретних класів.
 Збереження інкапсуляції при копіюванні складних структур.
Водночас шаблон має і недоліки:
 Реалізація глибокого копіювання є нетривіальним завданням.
 Усі класи повинні явно реалізовувати метод клонування.
 У випадку великої кількості об’єктів клонування може створювати
додаткове навантаження на пам’ять.

4 ВИСНОВКИ
У процесі виконання практичної роботи було вивчено створювальний патерн
Прототип. Визначено його архітектурну роль, принцип роботи та сфери
застосування. Проаналізовано переваги і недоліки використання патерна, а
також створено приклади коду, що демонструють його реалізацію.
Застосування Прототипа в розробці ПЗ дає змогу скоротити витрати часу і
ресурсів, підвищити масштабованість рішень і гнучкість архітектури.
Водночас ефективність його використання залежить від конкретних вимог і
складності системи.

ДОДАТОК А
Посилання на відео: https://youtu.be/-IAaltUxTAg
Хронологічний опис —
00:00 Назва доповіді. Представлення теми: «Шаблон проєктування
Прототип». Студентка називає своє ім’я, групу, та тему доповіді.
00:20 Вступ: що таке патерни проєктування. Коротке визначення, для чого
вони потрібні в розробці програмного забезпечення.
00:47 Класифікація патернів. Поділ на створювальні, структурні та
поведінкові. Уточнення, що Прототип — це створювальний шаблон.
01:12 Загальна ідея патерна Прототип. Суть — створення нових об’єктів
через клонування існуючого. Чому це ефективно.
01:35 Які проблеми вирішує Прототип. Приклади складних об’єктів та
ситуацій, коли краще копіювати, ніж створювати з нуля.
02:00 Механізм роботи патерна. Пояснення методів `clone()`, `copy()`,
поверхневого та глибокого копіювання. Коли що застосовується. UMLдіаграма патерна. Пояснення ролі Prototype, ConcretePrototype і Client. Як
взаємодіють елементи шаблону.
02:51 Приклад реалізації патерна на мові Python. Демонстрація класу `Car` з
методом `clone`. Пояснення, як копіюється об’єкт.
03:15 Аналіз переваг. Швидкість, незалежність від конкретних класів,
зниження складності коду. Аналіз недоліків. Складність глибокого
копіювання, необхідність реалізації `clone()` у всіх класах.
03:50 Сфери застосування. Приклади з ігрової індустрії, графічних
редакторів, CAD-систем.
04:21 Порівняння з іншими шаблонами. Відмінності між Прототипом і
Фабрикою, Будівельником, new vs clone.
04:49 Висновки. Узагальнення переваг використання шаблону Прототип.
Дякує за увагу.

ДОДАТОК Б
Слайди презентації
Рисунок Б.1 – Титульний слайд
Рисунок Б.2 – Патерни проєктування
Рисунок Б.3 – Класифікація патернів
Рисунок Б.4 – Загальна ідея прототипу
Рисунок Б.5 – Проблема, яку вирішує Прототип
Рисунок Б.6 – Як працює Прототип
Рисунок Б.7 – Приклад коду
Рисунок Б.8 – Переваги та недоліки
Рисунок Б.9– Сфери застосування
Рисунок Б.10 – Порівняння с іншими патернами
Рисунок Б.11 – Висновки
